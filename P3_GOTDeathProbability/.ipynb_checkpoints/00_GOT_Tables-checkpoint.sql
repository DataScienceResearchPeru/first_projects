{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "---------------------------------------------------------------------------\n",
    "-- GAME OF THRONES death predictor\n",
    "-- SQL Table Creation\n",
    "---------------------------------------------------------------------------\n",
    "\n",
    "CREATE DATABASE got;\n",
    "\n",
    "\\connect got\n",
    "\n",
    "---------------------------------------------------------------------------\n",
    "-- Information of deaths in books 1-5\n",
    "---------------------------------------------------------------------------\n",
    "\n",
    "CREATE TABLE raw01_character_death (\n",
    "    Name TEXT NULL,\n",
    "    Allegiances TEXT NULL,\n",
    "    Death_Yr INT NULL,\n",
    "    Death_Bk INT NULL,\n",
    "    Death_Chp INT NULL,\n",
    "    Apperance_Chp INT NULL,\n",
    "    Gender INT NULL,\n",
    "    Nobility INT NULL,\n",
    "    book1 INT NULL,\n",
    "    book2 INT NULL,\n",
    "    book3 INT NULL,\n",
    "    book4 INT NULL,\n",
    "    book5 INT NULL\n",
    ");\n",
    "\n",
    "COPY raw01_character_death FROM '/home/ubuntu/GOT/01_character-deaths.csv' DELIMITER ',' CSV HEADER;\n",
    "\n",
    "SELECT * FROM raw01_character_death;\n",
    "# 917\n",
    "\n",
    "---------------------------------------------------------------------------\n",
    "-- General Information of characters in books 1-5\n",
    "---------------------------------------------------------------------------\n",
    "\n",
    "CREATE TABLE raw01_character (\n",
    "    Id INT NULL,\n",
    "    isAlive INT NULL,\n",
    "    predict_dth TEXT NULL,\n",
    "    prob_alive FLOAT NULL,\n",
    "    prob_death FLOAT NULL,\n",
    "    name TEXT NULL,\n",
    "    title TEXT NULL,\n",
    "    male INT NULL,\n",
    "    culture TEXT NULL,\n",
    "    Birth_Yr INT NULL,\n",
    "    Death_Yr INT NULL,\n",
    "    mother TEXT NULL,\n",
    "    father TEXT NULL,\n",
    "    heir TEXT NULL,\n",
    "    house TEXT NULL,\n",
    "    spouse TEXT NULL,\n",
    "    book1 INT NULL,\n",
    "    book2 INT NULL,\n",
    "    book3 INT NULL,\n",
    "    book4 INT NULL,\n",
    "    book5 INT NULL,\n",
    "    isAliveMother INT NULL,\n",
    "    isAliveFather INT NULL,\n",
    "    isAliveHeir INT NULL,\n",
    "    isAliveSpouse INT NULL,\n",
    "    isMarried INT NULL,\n",
    "    isNoble INT NULL,\n",
    "    age INT NULL,\n",
    "    numDeadRelations INT NULL,\n",
    "    boolDeadRelations INT NULL,\n",
    "    isPopular INT NULL,\n",
    "    popularity FLOAT NULL,\n",
    "    isAlive2 INT NULL\n",
    ");\n",
    "\n",
    "COPY raw01_character FROM '/home/ubuntu/GOT/csv/01_character-predictions.csv' DELIMITER ',' CSV HEADER;\n",
    "# 1946 \n",
    "\n",
    "SELECT * FROM raw01_character;\n",
    "\n",
    "---------------------------------------------------------------------------\n",
    "-- Quick EDA in SQL\n",
    "---------------------------------------------------------------------------\n",
    "\n",
    "SELECT COUNT(DISTINCT T1.NAME)\n",
    "FROM raw01_character T1\n",
    "INNER JOIN raw01_character_death T2\n",
    "ON lower(T1.name) = LOWER(T2.Name)\n",
    "# 1704 (Out of 1946)\n",
    "# Unique values: 851\n",
    "\n",
    "----------------------------------\n",
    "-- Categorical Variable Analysis\n",
    "----------------------------------\n",
    "\n",
    "SELECT COUNT(DISTINCT SUBSTRING(title,1,4)) FROM raw01_character;\n",
    "#140\n",
    "\n",
    "SELECT COUNT(DISTINCT culture) FROM raw01_character;\n",
    "# 64\n",
    "\n",
    "SELECT SUBSTRING(LOWER(culture), 1, 5), COUNT(*) FROM raw01_character\n",
    "GROUP BY 1\n",
    "ORDER BY 2 DESC;\n",
    "# 39\n",
    "\n",
    "\n",
    "SELECT DISTINCT LOWER(house) FROM raw01_character where house like '%annister';\n",
    "# 347\n",
    "\n",
    "SELECT LOWER(house), COUNT(*) FROM raw01_character\n",
    "GROUP BY 1\n",
    "ORDER BY 2 DESC;\n",
    "# Take house with at least 10 characters\n",
    "\n",
    "SELECT LOWER(house) as house, COUNT(*) as c \n",
    "FROM raw01_character\n",
    "GROUP BY house\n",
    "HAVING COUNT(*) >=10;\n",
    "\n",
    "SELECT LOWER(allegiances) as house, COUNT(*) as c \n",
    "FROM raw01_character_death\n",
    "GROUP BY allegiances\n",
    "HAVING COUNT(*) >=10;\n",
    "\n",
    "SELECT\n",
    "CASE WHEN LOWER(T2.allegiances) = 'none' THEN LOWER(T1.house)\n",
    "    WHEN LOWER(T2.allegiances) NOT LIKE 'house %' THEN 'house '||LOWER(T2.allegiances)\n",
    "ELSE LOWER(T2.allegiances) END house,\n",
    "count(*)\n",
    "FROM raw01_character T1\n",
    "INNER JOIN raw01_character_death T2\n",
    "ON LOWER(T1.name) = LOWER(T2.Name)\n",
    "GROUP BY 1\n",
    "ORDER BY 2 DESC\n",
    "HAVING count(*) >= 10;\n",
    "\n",
    "----------------------------------\n",
    "-- Character Relation Analysis\n",
    "----------------------------------\n",
    "\n",
    "SELECT CASE WHEN mother IS NULL THEN False ELSE True END as hasMom, COUNT(*) as c \n",
    "FROM raw01_character\n",
    "GROUP BY hasMom;\n",
    "# Only 21 characters have known Mom\n",
    "\n",
    "SELECT CASE WHEN father IS NULL THEN False ELSE True END as hasDad, COUNT(*) as c \n",
    "FROM raw01_character\n",
    "GROUP BY hasDad;\n",
    "# Only 26 characters have known Dad\n",
    "\n",
    "SELECT CASE WHEN heir IS NULL THEN False ELSE True END as hasHeir, COUNT(*) as c \n",
    "FROM raw01_character\n",
    "GROUP BY hasheir;\n",
    "# Only 23 characters have known Heir\n",
    "\n",
    "SELECT CASE WHEN spouse IS NULL THEN False ELSE True END as hasSpouse, COUNT(*) as c \n",
    "FROM raw01_character\n",
    "GROUP BY hasSpouse;\n",
    "# 276 characters have known Spouse\n",
    "\n",
    "----------------------------------\n",
    "-- Final Query 1 -> Pandas\n",
    "----------------------------------\n",
    "\n",
    "SELECT DISTINCT\n",
    "    C.name,\n",
    "    C.isAlive,\n",
    "    -- Boolean original features\n",
    "    C.male,\n",
    "    C.book1  ,\n",
    "    C.book2  ,\n",
    "    C.book3  ,\n",
    "    C.book4  ,\n",
    "    C.book5  ,\n",
    "    C.isAliveMother  ,\n",
    "    C.isAliveFather  ,\n",
    "    C.isAliveHeir  ,\n",
    "    C.isAliveSpouse  ,\n",
    "    C.isMarried  ,\n",
    "    C.isNoble  ,\n",
    "    C.boolDeadRelations  ,\n",
    "    C.isPopular  ,\n",
    "    C2.Death_Bk  ,\n",
    "    C2.Apperance_Chp,\n",
    "    \n",
    "    -- Boolean Transformed Features\n",
    "    CASE WHEN C.mother IS NULL THEN 0 ELSE 1 END as hasMom,\n",
    "    CASE WHEN C.father IS NULL THEN 0 ELSE 1 END as hasDad,\n",
    "    CASE WHEN C.heir IS NULL THEN 0 ELSE 1 END as hasHeir ,\n",
    "    CASE WHEN C.spouse IS NULL THEN 0 ELSE 1 END as hasSpouse  ,\n",
    "    \n",
    "    -- Numerical Original Features\n",
    "    C.age,\n",
    "    C.numDeadRelations,\n",
    "    C.popularity,\n",
    "    \n",
    "    -- Categorical Transformed Features\n",
    "    SUBSTRING(C.culture, 1, 5) culture,\n",
    "    CASE WHEN C.house IS NULL THEN 'Unknown' \n",
    "        WHEN H.house IS NULL THEN 'Other' \n",
    "        ELSE UPPER(C.house) END as house\n",
    "\n",
    "FROM raw01_character AS C\n",
    "LEFT OUTER JOIN (SELECT\n",
    "    CASE WHEN UPPER(T2.allegiances) = 'none' THEN UPPER(T1.house)\n",
    "        WHEN UPPER(T2.allegiances) NOT LIKE 'house %' THEN 'house '||UPPER(T2.allegiances)\n",
    "    ELSE UPPER(T2.allegiances) END house,\n",
    "    count(*)\n",
    "    FROM raw01_character T1\n",
    "    INNER JOIN raw01_character_death T2\n",
    "    ON UPPER(T1.name) = UPPER(T2.Name)\n",
    "    GROUP BY 1\n",
    "    HAVING count(*) >= 10) AS H\n",
    "ON UPPER(C.house) = UPPER(H.house)\n",
    "\n",
    "INNER JOIN raw01_character_death C2\n",
    "ON UPPER(C.name) = UPPER(C2.Name);\n",
    "\n",
    "\n",
    "---------------------------------------------------------------------------\n",
    "-- General Information of characters in tv show 1-6\n",
    "---------------------------------------------------------------------------\n",
    "\n",
    "CREATE TABLE raw11_character_S6 (\n",
    "    name TEXT NULL,\n",
    "    actor TEXT NULL,\n",
    "    time_S1 TEXT NULL,\n",
    "    time_S2 TEXT NULL,\n",
    "    time_S3 TEXT NULL,\n",
    "    time_S4 TEXT NULL,\n",
    "    full_time_S1 TEXT NULL,\n",
    "    full_time_S2 TEXT NULL,\n",
    "    full_time_S3 TEXT NULL,\n",
    "    full_time_S4 TEXT NULL,\n",
    "    total_time TEXT NULL,\n",
    "    total_episode_num INT NULL,\n",
    "    season1 TEXT NULL,\n",
    "    season2 TEXT NULL,\n",
    "    season3 TEXT NULL,\n",
    "    season4 TEXT NULL,\n",
    "    isAlive TEXT NULL,\n",
    "    death_season INT NULL,\n",
    "    death_by TEXT NULL,\n",
    "    check_season INT NULL,\n",
    "    allegiance TEXT NULL,\n",
    "    age INT NULL,\n",
    "    enter TEXT NULL\n",
    ");\n",
    "\n",
    "COPY raw11_character_S6 FROM '/home/ubuntu/GOT/csv/11_Character Data-S6.csv' DELIMITER ',' CSV HEADER;\n",
    "# 122\n",
    "\n",
    "---------------------------------------------------------------------------\n",
    "-- General Information of tv show episodes 1-6\n",
    "---------------------------------------------------------------------------\n",
    "\n",
    "CREATE TABLE raw11_episodes_tv (\n",
    "    season_ep INT NULL,\n",
    "    episode INT NULL,\n",
    "    title TEXT NULL,\n",
    "    rating FLOAT NULL,\n",
    "    viewers FLOAT NULL,\n",
    "    season INT NULL\n",
    ");\n",
    "\n",
    "COPY raw11_episodes_tv FROM '/home/ubuntu/GOT/11_Episodes.csv' DELIMITER ',' CSV HEADER;\n",
    "# 40\n",
    "\n",
    "---------------------------------------------------------------------------\n",
    "-- Quick EDA in SQL\n",
    "---------------------------------------------------------------------------\n",
    "\n",
    "DELETE FROM raw11_character_tv WHERE NAME IS NULL;\n",
    "# 1\n",
    "\n",
    "SELECT isAlive, COUNT(*) \n",
    "FROM raw11_character_tv \n",
    "GROUP BY 1;\n",
    "# 3 vales found: Alive, Deseaced, Unknown???\n",
    "\n",
    "SELECT name \n",
    "FROM raw11_character_tv \n",
    "WHERE isAlive ='Unknown';\n",
    "\n",
    "UPDATE raw11_character_tv SET isAlive = 'Deceased' WHERE name = 'Doreah';  \n",
    "# Dany's servant, locked down to deth\n",
    "\n",
    "UPDATE raw11_character_tv SET isAlive = 'Deceased' WHERE name = 'Xaro Xhoan Daxos';\n",
    "# Locked down to death\n",
    "\n",
    "UPDATE raw11_character_tv SET isAlive = 'Alive' WHERE name = 'Benjen Stark';\n",
    "# Came back to life (Alive)\n",
    "\n",
    "---------------------------------------------------------------------------\n",
    "-- Join Test on Both datasets\n",
    "---------------------------------------------------------------------------\n",
    "\n",
    "SELECT T1.name  AS name, COUNT(*) AS c\n",
    "FROM raw11_character_tv T1\n",
    "INNER JOIN raw01_character T2\n",
    "ON LOWER(T1.name) = LOWER(T2.Name)\n",
    "# 96\n",
    "# 25 main charcters (order ny importance) missing.  Better join in pandas (FuzzyWuzzy)\n",
    "\n",
    "\n",
    "SELECT T1.name\n",
    "FROM raw11_character_tv T1\n",
    "LEFT OUTER JOIN raw01_character T2\n",
    "ON LOWER(T1.name) = LOWER(T2.Name)\n",
    "WHERE T2.male IS NULL\n",
    "# 0\n",
    "\n",
    "SELECT T1.name\n",
    "FROM raw11_character_tv T1\n",
    "RIGHT OUTER JOIN raw01_character T2\n",
    "ON LOWER(T1.name) = LOWER(T2.Name)\n",
    "WHERE T2.male IS NULL\n",
    "# 0\n",
    "\n",
    "SELECT\n",
    "    season,\n",
    "    AVG(rating) rating,\n",
    "    AVG(viewers) avg_viewers,\n",
    "    SUM(viewers) total_viewers\n",
    "FROM raw11_episodes_tv\n",
    "GROUP BY 1;\n",
    "\n",
    "----------------------------------\n",
    "-- Final Query 2 -> Pandas\n",
    "----------------------------------\n",
    "\n",
    "SELECT\n",
    "    name  ,\n",
    "    CASE WHEN C.isAlive = 'Alive' THEN 1 ELSE 0 END isAlive_shw , --Si no en kb: 1\n",
    "    C.death_season  , --Si no en kb: NULL\n",
    "    COALESCE(CAST(NULLIF(LEFT(C.time_S1,POSITION(':' IN C.time_S1)-1), '') AS INT)*60 + \n",
    "             CAST(NULLIF(RIGHT(C.time_S1,2), '') AS INT),0) time_s1,    --Si no en kb: 0 en todas\n",
    "    COALESCE(CAST(NULLIF(LEFT(C.time_S2,POSITION(':' IN C.time_S2)-1), '') AS INT)*60 + \n",
    "             CAST(NULLIF(RIGHT(C.time_S2,2), '') AS INT),0) time_s2,\n",
    "    COALESCE(CAST(NULLIF(LEFT(C.time_S3,POSITION(':' IN C.time_S3)-1), '') AS INT)*60 + \n",
    "             CAST(NULLIF(RIGHT(C.time_S3,2), '') AS INT),0) time_s3,\n",
    "    COALESCE(CAST(NULLIF(LEFT(C.time_S4,POSITION(':' IN C.time_S4)-1), '') AS INT)*60 + \n",
    "             CAST(NULLIF(RIGHT(C.time_S4,2), '') AS INT),0) time_s4,\n",
    "    C.total_episode_num,  --Si no en kb: 0\n",
    "    CASE WHEN C.season1 = 'TRUE' THEN 1 ELSE 0 END season1,  --Si no en kb: 0 en todas\n",
    "    CASE WHEN C.season2 = 'TRUE' THEN 1 ELSE 0 END season2 ,\n",
    "    CASE WHEN C.season3 = 'TRUE' THEN 1 ELSE 0 END season3  ,\n",
    "    CASE WHEN C.season4 = 'TRUE' THEN 1 ELSE 0 END season4  ,\n",
    "    COALESCE(H.house, 'Other') house_shw,  --Si no en kb: Other\n",
    "    C.age_shw --Si no en kb: mean\n",
    "FROM raw11_character_tv C\n",
    "INNER JOIN (\n",
    "    SELECT LEFT(\n",
    "            CASE WHEN POSITION(E'\\n' IN allegiance) = 0 THEN allegiance\n",
    "            ELSE LEFT(allegiance,COALESCE(POSITION(E'\\n' IN allegiance)-1,0)) \n",
    "            END, 15) house, \n",
    "        COUNT(*)\n",
    "    FROM raw11_character_tv C\n",
    "    GROUP BY 1\n",
    "    HAVING COUNT(*) > 3) AS H\n",
    "    ON H.house = LEFT(\n",
    "            CASE WHEN POSITION(E'\\n' IN C.allegiance) = 0 THEN C.allegiance\n",
    "            ELSE LEFT(C.allegiance,COALESCE(POSITION(E'\\n' IN C.allegiance)-1,0)) \n",
    "            END, 15)\n",
    "\n",
    "---------------------------------------------------------------------------\n",
    "--  TV Series General impormation Seasons 1-7\n",
    "---------------------------------------------------------------------------\n",
    "\n",
    "CREATE TABLE raw03_character_tv (\n",
    "    char_id TEXT NULL,\n",
    "    name TEXT NULL\n",
    ");\n",
    "\n",
    "COPY raw03_character_tv FROM '/home/ubuntu/GOT/csv/03_characters.csv' DELIMITER ',' CSV HEADER;\n",
    "# 638\n",
    "\n",
    "UPDATE raw03_character_tv\n",
    "SET name = LEFT(name, LENGTH(name)-1)\n",
    "\n",
    "CREATE TABLE raw03_character_episode_tv (\n",
    "    episode INT NULL,\n",
    "    char_id TEXT NULL\n",
    ");\n",
    "\n",
    "COPY raw03_character_episode_tv FROM '/home/ubuntu/GOT/csv/03_character_episode.csv' DELIMITER ',' CSV HEADER;\n",
    "# 2725\n",
    "\n",
    "UPDATE raw03_character_episode_tv\n",
    "SET char_id = LEFT(char_id, LENGTH(char_id)-1);\n",
    "\n",
    "---------------------------------------------------------------------------\n",
    "-- Quick EDA in SQL\n",
    "---------------------------------------------------------------------------\n",
    "\n",
    "SELECT C.name\n",
    "FROM raw03_character_tv C2\n",
    "RIGHT JOIN raw11_character_tv C\n",
    "ON C.name = C2.name\n",
    "WHERE C2.CHAR_ID is null;\n",
    "# 19 Important Characters (Catelyn, Bran, Lancel, Drogo) are missing : Fuzzy!\n",
    "\n",
    "INNER JOIN raw03_character_episode_tv E\n",
    "ON C.char_id = E.char_id;\n",
    "# 104\n",
    "\n",
    "SELECT\n",
    "    AVG(rating) rating, -- 8.525\n",
    "    SUM(rating) rating, -- 341\n",
    "    AVG(viewers) avg_viewers, -- 4.531\n",
    "    SUM(viewers) total_viewers -- 181.23\n",
    "FROM raw11_episodes_tv;\n",
    "\n",
    "----------------------------------\n",
    "-- Final Query 3 -> Pandas\n",
    "----------------------------------\n",
    "\n",
    "SELECT\n",
    "    C.name,\n",
    "    SUM(E7.rating)/341 sum_rating_S7,\n",
    "    SUM(E7.viewers)/181.23 total_viewers_S7,\n",
    "FROM raw03_character_tv C\n",
    "INNER JOIN raw03_character_episode_tv CE\n",
    "ON C.char_id = CE.char_id\n",
    "INNER JOIN raw11_episodes_tv E7\n",
    "ON CE.episode = E7.episode\n",
    "GROUP BY 1\n",
    "ORDER BY 3 DESC;\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
